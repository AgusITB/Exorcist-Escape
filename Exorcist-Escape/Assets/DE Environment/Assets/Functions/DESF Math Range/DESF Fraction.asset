%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 78b2425a2284af743826c689403a4924, type: 3}
  m_Name: DESF Fraction
  m_EditorClassIdentifier: 
  m_functionInfo: "// Made with Amplify Shader Editor v1.9.2.2\n// Available at the
    Unity Asset Store - http://u3d.as/y3X \n/*ASEBEGIN\nVersion=19202\nNode;AmplifyShaderEditor.CommentaryNode;32;-608,-480;Inherit;False;793.9637;370;Math;5;0;15;7;16;17;;0,0,0,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;30;-606.3124,-802;Inherit;False;776.4901;306.2128;Fraction
    Node;2;14;29;;0,0,0,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;27;-608,-80;Inherit;False;588;341;Exsample
    Blinking Light;3;28;26;25;;0,0,0,1;0;0\nNode;AmplifyShaderEditor.StickyNoteNode;14;-336,-752;Inherit;False;464.1777;180.048;;;0,0,0,1;The
    Fraction Node removes the integer portion of a value and just returns the fractional
    portion - or the values to the right of the decimal.  $$This effectively limits
    the range of any input value to between 0 and 1 regardless of how large the value
    is.;0;0\nNode;AmplifyShaderEditor.StickyNoteNode;17;-304,-288;Inherit;False;435.9637;156.3723;;;0.0754717,0.0754717,0.0754717,1;The
    Fraction node rounds the input value down to the nearest whole number and then
    subtracts that from the original input. $$The result is just the fractional portion
    of the original value.;0;0\nNode;AmplifyShaderEditor.FractNode;25;-208,-16;Inherit;True;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.SimpleTimeNode;26;-416,-16;Inherit;False;1;0;FLOAT;1;False;1;FLOAT;0\nNode;AmplifyShaderEditor.StickyNoteNode;28;-528,64;Inherit;False;279;161;e;;0,0,0,1;In
    this example, we find the fractional value of Time - which is a value that goes
    from 0 to 1. As soon as the value reaches 1, it drops back to zero again and
    repeats. This is very useful to use for effects that need to loop.;0;0\nNode;AmplifyShaderEditor.FractNode;29;-528,-752;Inherit;True;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.StickyNoteNode;31;-1026,-800;Inherit;False;392;193;Reference
    Implementation;;0,0,0,1;frac for a float scalar could be implemented like this.$$float
    frac(float v)${$  return v - floor(v)@$};0;0\nNode;AmplifyShaderEditor.SimpleSubtractOpNode;16;-144,-432;Inherit;False;2;0;FLOAT;0;False;1;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionInput;7;-448,-432;Inherit;False;In;1;0;False;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FloorOpNode;15;-288,-368;Inherit;False;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionOutput;0;16,-432;Inherit;False;True;-1;Out;0;False;1;0;FLOAT;0;False;1;FLOAT;0\nWireConnection;25;0;26;0\nWireConnection;16;0;7;0\nWireConnection;16;1;15;0\nWireConnection;15;0;7;0\nWireConnection;0;0;16;0\nASEEND*/\n//CHKSM=2D6E4BB3C31FD80E7F591F069197E895BF85F991"
  m_functionName: 
  m_description: 'Fraction Node


    Teaching Sample

'
  m_additionalIncludes:
    m_additionalIncludes: []
    m_outsideIncludes: []
  m_additionalPragmas:
    m_additionalPragmas: []
    m_outsidePragmas: []
  m_additionalDirectives:
    m_validData: 0
    m_isDirty: 0
    m_moduleName: ' Additional Directives'
    m_independentModule: 1
    m_customEdited: 0
    m_additionalDirectives: []
    m_shaderFunctionDirectives: []
    m_nativeDirectives: []
    m_nativeDirectivesIndex: -1
    m_nativeDirectivesFoldout: 0
    m_directivesSaveItems: []
  m_nodeCategory: 0
  m_headerStyle: 2
  m_headerColor: {r: 0.19215687, g: 0.25882354, b: 0.3254902, a: 1}
  m_customNodeCategory: DESF Math Range
  m_previewPosition: 0
  m_hidden: 0
  m_url: 
